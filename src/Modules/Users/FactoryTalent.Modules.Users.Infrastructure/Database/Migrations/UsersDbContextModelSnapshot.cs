// <auto-generated />
using System;
using FactoryTalent.Modules.Users.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FactoryTalent.Modules.Users.Infrastructure.Database.Migrations;

[DbContext(typeof(UsersDbContext))]
partial class UsersDbContextModelSnapshot : ModelSnapshot
{
    protected override void BuildModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .HasDefaultSchema("users")
            .HasAnnotation("ProductVersion", "8.0.4")
            .HasAnnotation("Relational:MaxIdentifierLength", 63);

        NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

        modelBuilder.Entity("FactoryTalent.Modules.Users.Domain.Users.Contact", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<string>("PhoneNumber")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("character varying(100)")
                    .HasColumnName("phone_number");

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid")
                    .HasColumnName("user_id");

                b.HasKey("Id")
                    .HasName("pk_contacts");

                b.HasIndex("UserId")
                    .HasDatabaseName("ix_contacts_user_id");

                b.ToTable("contacts", "users");
            });

        modelBuilder.Entity("FactoryTalent.Modules.Users.Domain.Users.Permission", b =>
            {
                b.Property<string>("Code")
                    .HasMaxLength(100)
                    .HasColumnType("character varying(100)")
                    .HasColumnName("code");

                b.HasKey("Code")
                    .HasName("pk_permissions");

                b.ToTable("permissions", "users");

                b.HasData(
                    new
                    {
                        Code = "users:read"
                    },
                    new
                    {
                        Code = "users:update"
                    },
                    new
                    {
                        Code = "users:add"
                    });
            });

        modelBuilder.Entity("FactoryTalent.Modules.Users.Domain.Users.Role", b =>
            {
                b.Property<string>("Name")
                    .HasMaxLength(50)
                    .HasColumnType("character varying(50)")
                    .HasColumnName("name");

                b.Property<int>("Level")
                    .HasColumnType("integer")
                    .HasColumnName("level");

                b.HasKey("Name")
                    .HasName("pk_roles");

                b.ToTable("roles", "users");

                b.HasData(
                    new
                    {
                        Name = "Manager",
                        Level = 3
                    },
                    new
                    {
                        Name = "Administrator",
                        Level = 4
                    },
                    new
                    {
                        Name = "Employee",
                        Level = 2
                    },
                    new
                    {
                        Name = "Intern",
                        Level = 1
                    });
            });

        modelBuilder.Entity("FactoryTalent.Modules.Users.Domain.Users.User", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<string>("Address")
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)")
                    .HasColumnName("address");

                b.Property<DateTime?>("BirthDay")
                    .IsRequired()
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("birth_day");

                b.Property<string>("CPF")
                    .IsRequired()
                    .HasMaxLength(11)
                    .HasColumnType("character varying(11)")
                    .HasColumnName("cpf");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnType("character varying(300)")
                    .HasColumnName("email");

                b.Property<string>("FirstName")
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnType("character varying(200)")
                    .HasColumnName("first_name");

                b.Property<string>("IdentityId")
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("identity_id");

                b.Property<string>("LastName")
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnType("character varying(200)")
                    .HasColumnName("last_name");

                b.Property<Guid?>("SuperiorId")
                    .HasColumnType("uuid")
                    .HasColumnName("superior_id");

                b.HasKey("Id")
                    .HasName("pk_users");

                b.HasIndex("CPF")
                    .IsUnique()
                    .HasDatabaseName("ix_users_cpf");

                b.HasIndex("Email")
                    .IsUnique()
                    .HasDatabaseName("ix_users_email");

                b.HasIndex("IdentityId")
                    .HasDatabaseName("ix_users_identity_id");

                b.HasIndex("SuperiorId")
                    .HasDatabaseName("ix_users_superior_id");

                b.ToTable("users", "users");
            });

        modelBuilder.Entity("PermissionRole", b =>
            {
                b.Property<string>("PermissionCode")
                    .HasColumnType("character varying(100)")
                    .HasColumnName("permission_code");

                b.Property<string>("RoleName")
                    .HasColumnType("character varying(50)")
                    .HasColumnName("role_name");

                b.HasKey("PermissionCode", "RoleName")
                    .HasName("pk_role_permissions");

                b.HasIndex("RoleName")
                    .HasDatabaseName("ix_role_permissions_role_name");

                b.ToTable("role_permissions", "users");

                b.HasData(
                    new
                    {
                        PermissionCode = "users:read",
                        RoleName = "Manager"
                    },
                    new
                    {
                        PermissionCode = "users:update",
                        RoleName = "Manager"
                    },
                    new
                    {
                        PermissionCode = "users:add",
                        RoleName = "Manager"
                    },
                    new
                    {
                        PermissionCode = "users:read",
                        RoleName = "Administrator"
                    },
                    new
                    {
                        PermissionCode = "users:update",
                        RoleName = "Administrator"
                    },
                    new
                    {
                        PermissionCode = "users:add",
                        RoleName = "Administrator"
                    },
                    new
                    {
                        PermissionCode = "users:read",
                        RoleName = "Employee"
                    },
                    new
                    {
                        PermissionCode = "users:update",
                        RoleName = "Employee"
                    },
                    new
                    {
                        PermissionCode = "users:read",
                        RoleName = "Intern"
                    },
                    new
                    {
                        PermissionCode = "users:update",
                        RoleName = "Intern"
                    });
            });

        modelBuilder.Entity("RoleUser", b =>
            {
                b.Property<string>("RolesName")
                    .HasColumnType("character varying(50)")
                    .HasColumnName("role_name");

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid")
                    .HasColumnName("user_id");

                b.HasKey("RolesName", "UserId")
                    .HasName("pk_user_roles");

                b.HasIndex("UserId")
                    .HasDatabaseName("ix_user_roles_user_id");

                b.ToTable("user_roles", "users");
            });

        modelBuilder.Entity("FactoryTalent.Modules.Users.Domain.Users.Contact", b =>
            {
                b.HasOne("FactoryTalent.Modules.Users.Domain.Users.User", null)
                    .WithMany("Contacs")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_contacts_users_user_id");
            });

        modelBuilder.Entity("FactoryTalent.Modules.Users.Domain.Users.User", b =>
            {
                b.HasOne("FactoryTalent.Modules.Users.Domain.Users.User", "Superior")
                    .WithMany("Subordinates")
                    .HasForeignKey("SuperiorId")
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_users_users_superior_id");

                b.Navigation("Superior");
            });

        modelBuilder.Entity("PermissionRole", b =>
            {
                b.HasOne("FactoryTalent.Modules.Users.Domain.Users.Permission", null)
                    .WithMany()
                    .HasForeignKey("PermissionCode")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("fk_role_permissions_permissions_permission_code");

                b.HasOne("FactoryTalent.Modules.Users.Domain.Users.Role", null)
                    .WithMany()
                    .HasForeignKey("RoleName")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("fk_role_permissions_roles_role_name");
            });

        modelBuilder.Entity("RoleUser", b =>
            {
                b.HasOne("FactoryTalent.Modules.Users.Domain.Users.Role", null)
                    .WithMany()
                    .HasForeignKey("RolesName")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("fk_user_roles_roles_roles_name");

                b.HasOne("FactoryTalent.Modules.Users.Domain.Users.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("fk_user_roles_users_user_id");
            });

        modelBuilder.Entity("FactoryTalent.Modules.Users.Domain.Users.User", b =>
            {
                b.Navigation("Contacs");

                b.Navigation("Subordinates");
            });
#pragma warning restore 612, 618
    }
}
